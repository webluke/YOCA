@page "/admin/clipboard"
@attribute [Authorize(Roles = "Admin")]
@inject ClipboardDataAccess clipboardData
@inject Statuses state
@rendermode InteractiveServer
@inject IToastService ToastService
<FluentToastProvider />
<FluentDialogProvider />
<PageTitle>Admin - Clipboard</PageTitle>
<h5>Clipboard</h5>
<br />
<FluentButton Appearance="Appearance.Accent" OnClick="Create">Create</FluentButton>
<br />
<FluentDataGrid AutoFit Items="@query" id="Data">
    <PropertyColumn Title="Order" Property="@(c => c.Order)" />
    <TemplateColumn Title="Status">
        <StatusBadge statusIndex="@context.Status" />
    </TemplateColumn>
    <PropertyColumn Title="Date Completed" Property="@(c => c.DateCompleted)" />
    <PropertyColumn Title="Title" Property="@(c => c.Title)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="e => Update(e, context.Id)" />
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="e => Delete(e, context)" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<ClipboardModel>? clipboardItems { get; set; }
    IQueryable<ClipboardModel>? query { get; set; }
    private ClipboardModel newClipboard = new();
    TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Mountain Standard Time");

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        clipboardItems = await clipboardData.GetAllAdmin();
        query = clipboardItems.AsQueryable();
    }

    private async void Delete(MouseEventArgs e, ClipboardModel clipboardItem)
    {
        DeleteDialogModel item = new();
        item.Id = clipboardItem.Id;
        item.Name = clipboardItem.Title;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "650px",
                Title = $"Delete Clipboard Item",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await clipboardData.Delete(clipboardItem.Id);
            ToastService.ShowSuccess("Clipboard Item Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Create()
    {
        ClipboardModel model = new();
        model.DateCompleted = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone));
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "650px",
                Title = $"Create Clipboard Item",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ClipboardDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Clipboard Item Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Update(MouseEventArgs e, string id)
    {
        ClipboardModel model = await clipboardData.GetId(id);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "650px",
                Title = $"Create Clipboard",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ClipboardDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Clipboard Update.");
            await RefreshData();
            StateHasChanged();
        }
    }
}
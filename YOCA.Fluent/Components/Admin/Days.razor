@page "/admin/days"
@attribute [Authorize(Roles = "Admin")]
@inject DayOfCodeDataAccess dayData
@rendermode InteractiveServer

<PageTitle>Admin - Day</PageTitle>
<h5>Day</h5>
<br />
<FluentButton Color="Color.Success" OnClick="Create">Create</FluentButton>
<br />
<FluentDataGrid AutoFit Items="@query">
    <PropertyColumn Title="Day" Property="@(c => c.Day)" />
    <PropertyColumn Title="Date" Property="@(c => c.Date)" />
    <PropertyColumn Title="Goal" Property="@(c => c.Goal)" />
    <PropertyColumn Title="Result" Property="@(c => c.Result)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="e => Update(e, context.Id)" />
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="e => Delete(e, context.Id)" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<DayOfCodeModel>? days { get; set; }
    IQueryable<DayOfCodeModel>? query { get; set; }
    private DayOfCodeModel newDay = new DayOfCodeModel();
    private bool isUpdate = false;
    TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Mountain Standard Time");

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        days = await dayData.GetDays();
        query = days.AsQueryable(); 
    }

    private async void Delete(MouseEventArgs e, string id)
    {
        // bool? result = await DialogService.ShowMessageBox(
        // "Warning",
        // "Deleting can not be undone!",
        // yesText: "Delete!", cancelText: "Cancel");
        // //state = result == null ? "Canceled" : "Deleted!";
        // if (result == true)
        // {
        //     await dayData.Delete(id);
        //     await RefreshData();
        // }
        // StateHasChanged();
    }

    private async Task Create()
    {
        // DayOfCodeModel model = new();
        // model.Day = days.Count();
        // model.Date = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone));
        // model.Goal = days.FirstOrDefault().Tomorrow;
        // DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        // var parameters = new DialogParameters<DayDialog> { { x => x.model, model } };

        // var dialog = DialogService.Show<DayDialog>("Create Day", parameters, options);
        // var result = await dialog.Result;

        // if (!result.Canceled)
        // {
        //     await RefreshData();
        // }
    }

    private async Task Update(MouseEventArgs e, string cbId)
    {
        // DayOfCodeModel model = await dayData.GetId(cbId);
        // DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        // var parameters = new DialogParameters<DayDialog> { { x => x.model, model } };

        // var dialog = await DialogService.ShowAsync<DayDialog>("Update Day", parameters, options);
        // var result = await dialog.Result;

        // if (!result.Canceled)
        // {
        //     await RefreshData();
        // }
    }
}
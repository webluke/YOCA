@page "/admin/days"
@attribute [Authorize(Roles = "Admin")]
@inject DayOfCodeDataAccess dayData
@rendermode InteractiveServer
@inject IToastService ToastService
<FluentToastProvider />
<FluentDialogProvider />
<PageTitle>Admin - Days</PageTitle>
<h5>Days</h5>
<br />
<FluentButton Appearance="Appearance.Accent" OnClick="Create">Create</FluentButton>
<br />
<FluentDataGrid AutoFit Items="@query">
    <PropertyColumn Title="Day" Property="@(c => c.Day)" />
    <PropertyColumn Title="Date" Property="@(c => c.Date)" />
    <PropertyColumn Title="Goal" Property="@(c => c.Goal)" />
    <PropertyColumn Title="Result" Property="@(c => c.Result)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="e => Update(e, context.Id)" />
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="e => Delete(e, context)" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<DayOfCodeModel>? days { get; set; }
    IQueryable<DayOfCodeModel>? query { get; set; }
    private DayOfCodeModel newDay = new DayOfCodeModel();
    private bool isUpdate = false;
    TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Mountain Standard Time");

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        days = await dayData.GetDays();
        query = days.AsQueryable(); 
    }

    private async void Delete(MouseEventArgs e, DayOfCodeModel model)
    {
        DeleteDialogModel item = new();
        item.Id = model.Id;
        item.Name = $"Day Number {model.Day}";
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Delete Link",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await dayData.Delete(model.Id);
            ToastService.ShowSuccess("Day of Code Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Create()
    {
        DayOfCodeModel model = new();
        model.Day = days.Count();
        model.Date = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone));
        model.Goal = days.FirstOrDefault().Tomorrow;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Day of Code",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DayDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Day of Code Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Update(MouseEventArgs e, string cbId)
    {
        DayOfCodeModel model = await dayData.GetId(cbId);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Update Day of Code",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DayDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Day of Code Updated.");
            await RefreshData();
            StateHasChanged();
        }
    }
}
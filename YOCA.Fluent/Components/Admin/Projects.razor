@page "/admin/projects"
@attribute [Authorize(Roles = "Admin")]
@inject ProjectDataAccess projectData
@inject ProjectBoardDataAccess boardData
@inject ProjectTaskDataAccess taskData
@inject Statuses state
@rendermode InteractiveServer
@inject IToastService ToastService
<FluentToastProvider />
<FluentDialogProvider />
<PageTitle>Admin - Projects</PageTitle>
<h5>Projects</h5>
<br />
<FluentButton Appearance="Appearance.Accent" OnClick="Create">Create</FluentButton>
<br />
<br />
@if (projectItems != null)
{
    @foreach (var p in projectItems)
    {
        <FluentCard Height="auto">
            <h4>@p.Title</h4>
            <StatusBadge statusIndex="@p.Status" />
            <br />
            <h5>Start: @p.StartDate - End: @p.EndDate</h5>
            <FluentCard Height="auto">
                @((MarkupString)MarkdownService.Parse(p.Description))
            </FluentCard>
            <br />
            <FluentStack>
                <FluentButton Color="Color.Success" OnClick="e => Update(e, p.Id)">Edit Project</FluentButton>
                <FluentButton Color="Color.Success" OnClick="e => Delete(e, p)">Delete Project</FluentButton>
            </FluentStack>
            @if (p.Boards.Count > 1)
            {
            <FluentStack>
                <FluentButton Appearance="Appearance.Accent" OnClick="e => CreateBoard(e, p.Id)">Create Board</FluentButton>
            </FluentStack>
            <br />
            <div style="display: flex; overflow-x: auto; padding-bottom: 15px;">
                @foreach (var board in p.Boards)
                {
                    <div style="margin-right: 15px; flex-shrink: 0; width: 300px;">
                        <FluentCard>
                            <h5>@board.Title</h5>
                            <FluentStack>
                                <FluentButton Appearance="Appearance.Accent" OnClick="e => CreateTask(e, p.Id, board.Id)">Create Task</FluentButton>
                                <FluentButton Appearance="Appearance.Accent" OnClick="e => UpdateBoard(e, board.Id)">Edit Board</FluentButton>
                                <FluentButton Color="Color.Error" OnClick="e => DeleteBoard(e, board)">Delete Board</FluentButton>
                            </FluentStack>
                            <div style="margin-top: 10px;">
                                @foreach (var task in board.Tasks)
                                {
                                    <FluentCard style="margin-bottom: 10px;">
                                        <p>@task.Title</p>
                                        <StatusBadge statusIndex="@task.Status" />
                                        <FluentStack>
                                            <FluentButton Appearance="Appearance.Accent" OnClick="e => UpdateTask(e, task.Id)">Edit Task</FluentButton>
                                            <FluentButton Color="Color.Error" OnClick="e => DeleteTask(e, task)">Delete Task</FluentButton>
                                        </FluentStack>
                                    </FluentCard>
                                }
                            </div>
                        </FluentCard>
                    </div>
                }
                </div>
            } else
            {
                <FluentStack>
                <FluentButton Color="Color.Error" OnClick="e => InitBoards(p.Id)">Initilize Board</FluentButton>
                </FluentStack>
            }
        </FluentCard>
        <br />
    }
}

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<ProjectModel>? projectItems { get; set; }
    private ProjectModel newProject = new();
    TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Mountain Standard Time");

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        projectItems = await projectData.GetAllAdminWithTasks();    
    }

    private async Task InitBoards(string projectId)
    {
        await boardData.InitBoards(projectId);
        await RefreshData();
    }

    private async void Delete(MouseEventArgs e, ProjectModel project)
    {
        DeleteDialogModel item = new();
        item.Id = project.Id;
        item.Name = project.Title;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Delete Project",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await projectData.Delete(project.Id);
            ToastService.ShowSuccess("Project Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Create()
    {
        ProjectModel model = new();
        model.StartDate = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone));
        model.EndDate = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone).AddDays(14));
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Project",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Update(MouseEventArgs e, string id)
    {
        ProjectModel model = await projectData.GetId(id);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Project",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Update.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async void DeleteTask(MouseEventArgs e, ProjectTaskModel projectTaskItem)
    {
        DeleteDialogModel item = new();
        item.Id = projectTaskItem.Id;
        item.Name = projectTaskItem.Title;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Delete Project Task",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await taskData.Delete(projectTaskItem.Id);
            ToastService.ShowSuccess("Project Task Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task CreateTask(MouseEventArgs e, string projectId, string boardId)
    {
        ProjectTaskModel model = new();
        model.BoardId = boardId;
        model.ProjectId = projectId;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Project Task",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectTaskDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Task Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task UpdateTask(MouseEventArgs e, string id)
    {
        ProjectTaskModel model = await taskData.GetId(id);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Update Project Task",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectTaskDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Task Update.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async void DeleteBoard(MouseEventArgs e, ProjectBoardModel projectBoardItem)
    {
        DeleteDialogModel item = new();
        item.Id = projectBoardItem.Id;
        item.Name = projectBoardItem.Title;
        var parameters = new DialogParameters()
        {
            Height = "auto",
            Width = "auto",
            Title = $"Delete Project Task",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await boardData.Delete(projectBoardItem.Id);
            ToastService.ShowSuccess("Project Board Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task CreateBoard(MouseEventArgs e, string projectId)
    {
        ProjectBoardModel model = new();
        model.ProjectId = projectId;
        var parameters = new DialogParameters()
        {
            Height = "auto",
            Width = "auto",
            Title = $"Creat Project Board",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<ProjectBoardDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Board Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task UpdateBoard(MouseEventArgs e, string id)
    {
        ProjectBoardModel model = await boardData.GetId(id);
        var parameters = new DialogParameters()
        {
            Height = "auto",
            Width = "auto",
            Title = $"Update Project Board",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<ProjectBoardDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Board Update.");
            await RefreshData();
            StateHasChanged();
        }
    }
}
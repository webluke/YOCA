@page "/admin/projects"
@attribute [Authorize(Roles = "Admin")]
@inject ProjectDataAccess projectData
@inject ProjectBoardDataAccess boardData
@inject ProjectTaskDataAccess taskData
@inject Statuses state
@rendermode InteractiveServer
@inject IToastService ToastService
@inject IJSRuntime JS

<FluentToastProvider />
<FluentDialogProvider />
<PageTitle>Admin - Projects</PageTitle>
<h5>Projects</h5>
<br />
<FluentButton Appearance="Appearance.Accent" OnClick="Create">Create</FluentButton>
<br />
<br />
@if (projectItems != null)
{
    @foreach (var p in projectItems)
    {
    <FluentCard Height="auto">
        <h4>@p.Title</h4>
        <FluentToolbar style="width:100%">
            <h5>Start: @p.StartDate - End: @p.EndDate</h5>
            <StatusBadge statusIndex="@p.Status" />
            <FluentButton Color="Color.Success" OnClick="e => Update(e, p.Id)" IconEnd="@(FontAwesome.Icon("fas fa-file-pen"))" slot="end"></FluentButton>
            <FluentButton Color="Color.Error" OnClick="e => Delete(e, p)" IconEnd="@(FontAwesome.Icon("fas fa-trash"))" slot="end"></FluentButton>
        </FluentToolbar>
        <br />
        <hr />
        @((MarkupString)MarkdownService.Parse(p.Description))
        <br />
        @if (p.Boards.Count > 1)
        {
            <br />
            <FluentStack Orientation="Orientation.Horizontal">
            @foreach (var board in p.Boards)
            {
                <FluentCard Height="auto">
                    <FluentToolbar style="width:100%">
                        <div role="status" style="height: 100%; vertical-align: middle; padding: 10px 10px 0px 10px; boarder: 2px solid gray; border-radius: 5px; color: @board.Color. ; background-color: @board.BackgroundColor ;">
                            <h5><i class="@board.Icon" />&nbsp;&nbsp;@board.Title</h5>
                        </div>                        
                        <FluentButton OnClick="e => UpdateBoard(e, board.Id)" IconEnd="@(FontAwesome.Icon("fas fa-file-pen"))" slot="end"></FluentButton>
                        <FluentButton Color="Color.Error" OnClick="e => DeleteBoard(e, board)" IconEnd="@(FontAwesome.Icon("fas fa-trash"))" slot="end"></FluentButton>
                        <FluentButton Appearance="Appearance.Accent" OnClick="e => CreateTask(e, p.Id, board.Id)" IconEnd="@(FontAwesome.Icon("fas fa-plus"))" slot="end"></FluentButton>
                    </FluentToolbar>
                    <hr />
                            <FluentDragContainer TItem="ProjectTaskModel"
                                                 OnDropEnd="(e) => HandleDrop(e, p, board)"
                                                 style="min-height: 150px; width:100%">
                                <FluentStack Orientation="Orientation.Vertical">

                                    @foreach (var task in board.Tasks.OrderBy(t => t.Order))
                                    {
                                    <FluentDropZone TItem="ProjectTaskModel"
                                                    OnDragStart="(e) => HandleDragStart(e, task, board)"
                                                    Droppable="true"
                                                    Draggable="true"
                                                    style="width:100%">
                                        <FluentCard style="margin-bottom: 4px;">
                                            <FluentToolbar style="width:100%">
                                                <h5>@task.Title</h5>
                                                <FluentButton OnClick="e => UpdateTask(e, task.Id)"
                                                                IconEnd="@(FontAwesome.Icon("fas fa-file-pen"))"
                                                                slot="end"></FluentButton>
                                                <FluentButton Color="Color.Error"
                                                                OnClick="e => DeleteTask(e, task)"
                                                                IconEnd="@(FontAwesome.Icon("fas fa-trash"))"
                                                                slot="end"></FluentButton>
                                            </FluentToolbar>
                                            <hr />
                                            @((MarkupString)MarkdownService.Parse(task.Description))
                                        </FluentCard>
                                    </FluentDropZone>
                                    }
                                    @if (board.Tasks.Count == 0)
                                    {
                                    <!-- Empty zone at bottom to allow dropping below last item -->
                                    <FluentDropZone TItem="ProjectTaskModel"
                                    Droppable="true"
                                    Draggable="false"
                                    style="width:100%; border: 1px dashed transparent;">
                                        <FluentCard style="width:100%">
                                            <FluentToolbar>
                                                <h5>No Tasks 😕</h5>
                                            </FluentToolbar>
                                        </FluentCard>
                                    </FluentDropZone>
                                    }
                                </FluentStack>
                            </FluentDragContainer>
                </FluentCard>
            }
            <FluentButton Appearance="Appearance.Accent" OnClick="e => CreateBoard(e, p.Id)" IconEnd="@(FontAwesome.Icon("fas fa-plus"))" slot="end"></FluentButton>
            </FluentStack>
        } else
        {
            <FluentButton Color="Color.Error" OnClick="e => InitBoards(p.Id)">Initialize Board</FluentButton>
        }
    </FluentCard>
    <br />
    }
}

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<ProjectModel>? projectItems { get; set; }
    private ProjectModel newProject = new();
    TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Mountain Standard Time");

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("highlightCode");
    }

    private async Task RefreshData()
    {
        projectItems = await projectData.GetAllAdminWithTasks();    
    }

    private ProjectTaskModel? draggedTask;
    private ProjectBoardModel? sourceBoard;

    private void HandleDragStart(FluentDragEventArgs<ProjectTaskModel> e, ProjectTaskModel task, ProjectBoardModel board)
    {
        draggedTask = task;
        sourceBoard = board;
    }

    private async Task HandleDrop(
        FluentDragEventArgs<ProjectTaskModel> e,
        ProjectModel project,
        ProjectBoardModel destinationBoard)
    {
        if (draggedTask == null || sourceBoard == null)
            return;

        // // Remove from source board
        // sourceBoard.Tasks.Remove(draggedTask);

        // // Add to destination board at drop position
        // destinationBoard.Tasks.Add(draggedTask);
        // draggedTask.BoardId = destinationBoard.Id;

		draggedTask.BoardId = destinationBoard.Id;

        // Reorder tasks in destination board
        int order = 0;
        foreach (var task in destinationBoard.Tasks.OrderBy(t => t.Order))
        {
            task.Order = order++;
            await taskData.Update(task);
        }

        // Persist updates
        await taskData.Update(draggedTask);

        // Reset state
        draggedTask = null;
        sourceBoard = null;

        ToastService.ShowSuccess("Task moved!");
        await RefreshData();
        StateHasChanged();
    }

    private async Task InitBoards(string projectId)
    {
        await boardData.InitBoards(projectId);
        await RefreshData();
    }

    private async void Delete(MouseEventArgs e, ProjectModel project)
    {
        DeleteDialogModel item = new();
        item.Id = project.Id;
        item.Name = project.Title;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Delete Project",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await projectData.Delete(project.Id);
            ToastService.ShowSuccess("Project Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Create()
    {
        ProjectModel model = new();
        model.StartDate = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone));
        model.EndDate = DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone).AddDays(14));
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Project",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Update(MouseEventArgs e, string id)
    {
        ProjectModel model = await projectData.GetId(id);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Project",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Update.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async void DeleteTask(MouseEventArgs e, ProjectTaskModel projectTaskItem)
    {
        DeleteDialogModel item = new();
        item.Id = projectTaskItem.Id;
        item.Name = projectTaskItem.Title;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Delete Project Task",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await taskData.Delete(projectTaskItem.Id);
            ToastService.ShowSuccess("Project Task Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task CreateTask(MouseEventArgs e, string projectId, string boardId)
    {
        ProjectTaskModel model = new();
        model.BoardId = boardId;
        model.ProjectId = projectId;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Project Task",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectTaskDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Task Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task UpdateTask(MouseEventArgs e, string id)
    {
        ProjectTaskModel model = await taskData.GetId(id);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Update Project Task",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<ProjectTaskDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Task Update.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async void DeleteBoard(MouseEventArgs e, ProjectBoardModel projectBoardItem)
    {
        DeleteDialogModel item = new();
        item.Id = projectBoardItem.Id;
        item.Name = projectBoardItem.Title;
        var parameters = new DialogParameters()
        {
            Height = "auto",
            Width = "auto",
            Title = $"Delete Project Task",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await boardData.Delete(projectBoardItem.Id);
            ToastService.ShowSuccess("Project Board Deleted.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task CreateBoard(MouseEventArgs e, string projectId)
    {
        ProjectBoardModel model = new();
        model.ProjectId = projectId;
        var parameters = new DialogParameters()
        {
            Height = "auto",
            Width = "auto",
            Title = $"Creat Project Board",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<ProjectBoardDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Board Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task UpdateBoard(MouseEventArgs e, string id)
    {
        ProjectBoardModel model = await boardData.GetId(id);
        var parameters = new DialogParameters()
        {
            Height = "auto",
            Width = "auto",
            Title = $"Update Project Board",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<ProjectBoardDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Project Board Update.");
            await RefreshData();
            StateHasChanged();
        }
    }
}
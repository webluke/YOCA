@page "/admin/pages"
@attribute [Authorize(Roles = "Admin")]
@inject PageDataAccess pageData
@rendermode InteractiveServer
@inject IToastService ToastService
<FluentToastProvider />
<FluentDialogProvider />
<PageTitle>Admin - Pages</PageTitle>
<h5>Pages</h5>
<br />
<FluentButton Appearance="Appearance.Accent" OnClick="Create">Create</FluentButton>
<br />
<FluentDataGrid AutoFit Items="@query" id="Data">
    <PropertyColumn Title="Order" Property="@(c => c.Order)" />
    <PropertyColumn Title="Title" Property="@(c => c.Title)" />
    <TemplateColumn Title="Icon">
        <i class="@context.Icon" />
    </TemplateColumn>
    <PropertyColumn Title="Menu Name" Property="@(c => c.MenuName)" />
    <PropertyColumn Title="Published" Property="@(c => c.IsPublished)" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="e => Update(e, context.Id)" />
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="e => Delete(e, context)" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<PageModel>? pages { get; set; }
    IQueryable<PageModel>? query { get; set; }
    private PageModel newPage = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        pages = await pageData.GetAllAdmin();
        query = pages.AsQueryable();
    }

    private async void Delete(MouseEventArgs e, PageModel page)
    {
        DeleteDialogModel item = new();
        item.Id = page.Id;
        item.Name = page.Title;
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Delete Page",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<DeleteDialog>(item, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await pageData.Delete(page.Id);
            ToastService.ShowSuccess("Deleted Page.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Create()
    {
        PageModel model = new();
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Create Page",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<PageDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Page Created.");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task Update(MouseEventArgs e, string id)
    {
        PageModel model = await pageData.GetId(id);
        var parameters = new DialogParameters()
            {
                Height = "auto",
                Width = "auto",
                Title = $"Update Page",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };

        var dialog = await DialogService.ShowDialogAsync<PageDialog>(model, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ToastService.ShowSuccess("Page Updated.");
            await RefreshData();
            StateHasChanged();
        }
    }
}
@inject ProjectTaskDataAccess dataAccess
@inject ProjectBoardDataAccess boardDataAccess
@inject Statuses states
@implements IDialogContentComponent<ProjectTaskModel>

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(FontAwesome.Icon("fas fa-hammer"))" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentNumberField @bind-Value="@Content.Order" Label="Order" style="width: 100%;" />
@*         <InputSelect @bind-Value="@Content.Status" style="font-family: 'FontAwesome', 'sans-serif'">
            @foreach (var t in states.DefaultStatuses)
            {
                <option value=@t.Key style="background: @t.Value.BackgroundColor; color: @t.Value.Color;">@((MarkupString)$"{t.Value.UnicodeIcon}&nbsp;&nbsp;{t.Value.Name}")</option>
            }
        </InputSelect> *@
@*         <InputSelect @bind-Value="@Content.BoardId" style="width: 100%;">
            @if(Boards != null) {
            @foreach (var b in Boards)
            {
				<option value=@b.Id>@b.Title</option>
            }
            }
		</InputSelect> *@
        <FluentTextField @bind-Value="@Content.Title" Label="Title" style="width: 100%;" />
        <MarkdownEditor @bind-Value="@Content.Description" />
    </FluentStack>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    @if (String.IsNullOrEmpty(Content.Id))
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@Create">Create</FluentButton>
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@Update">Update</FluentButton>
    }
    <FluentButton Appearance="Appearance.Neutral" OnClick="@Cancel">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; }
    [Parameter]
    public ProjectTaskModel Content { get; set; }
	public List<ProjectBoardModel> Boards { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
		// Boards = (await boardDataAccess.GetProjectBoards(Content.ProjectId)).ToList();
        // StateHasChanged();
    }

    private void Cancel() => Dialog.CancelAsync();

    private async void Update()
    {
        await dataAccess.Update(Content);
        await Dialog.CloseAsync();
    }

    private async void Create()
    {
        await dataAccess.Insert(Content);
        await Dialog.CloseAsync();
    }
}

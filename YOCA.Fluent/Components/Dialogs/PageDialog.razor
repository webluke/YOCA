@inject PageDataAccess dataAccess
@using YOCA.DataAccess.Tools
@implements IDialogContentComponent<PageModel>

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(FontAwesome.Icon("fas fa-newspaper"))" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <EditForm Model="@Content">
    <FluentStack Orientation="Orientation.Vertical">
        <DataAnnotationsValidator />
        <FluentValidationSummary />
        <FluentNumberField @bind-Value="@Content.Order" Label="Order" style="width: 100%;" />
        <FluentTextField Value="@Content.Title" ValueChanged="@(e => UpdateTitle(e))" Label="Title" style="width: 100%;" />
        <FluentTextField @bind-Value="@Content.Slug"  Label="Slug" style="width: 100%;" />
        <FluentTextField @bind-Value="@Content.MenuName" Label="Menu Name" style="width: 100%;" />
        <FluentStack style="width: 100%;">
            <i class="@Content.Icon" style="width: 32px;" />
            <FluentTextField @bind-Value="@Content.Icon" Label="Icon" style="width: 100%;" />
        </FluentStack>
        <FluentSwitch @bind-Value="@Content.IsPublished" Label="Published" style="width: 100%;" />
        <MarkdownEditor @bind-Value="@Content.Content" />
    </FluentStack>
    </EditForm>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    @if (String.IsNullOrEmpty(Content.Id))
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@Create">Create</FluentButton>
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@Update">Update</FluentButton>
    }
    <FluentButton Appearance="Appearance.Neutral" OnClick="@Cancel">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public PageModel Content { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

    }

    private void Cancel() => Dialog.CancelAsync();

    private async void Update()
    {
        await dataAccess.Update(Content);
        await Dialog.CloseAsync();
    }

    private async void Create()
    {
        await dataAccess.Insert(Content);
        await Dialog.CloseAsync();
    }

    private void UpdateTitle (string title)
    {
        Content.Title = title;
        Content.Slug = Slugs.NewSlug(title);
    }
}

@inject ProjectBoardDataAccess dataAccess
@inject Statuses states
@implements IDialogContentComponent<ProjectBoardModel>

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(FontAwesome.Icon("fas fa-hammer"))" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentNumberField @bind-Value="@Content.Order" Label="Order" style="width: 100%;" />
        <FluentTextField @bind-Value="@Content.Icon" Label="Icon" style="width: 100%;" />
        <label for="color">Text Color</label>
        <input id="color" type="color" @bind-value=@Content.Color style="width: 100%;" />
        <label for="bgcolor">Background Color</label>
        <input id="bgcolor" type="color" @bind-value=@Content.BackgroundColor style="width: 100%;" />
        <FluentTextField @bind-Value="@Content.Title" Label="Title" style="width: 100%;" />
    </FluentStack>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    @if (String.IsNullOrEmpty(Content.Id))
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@Create">Create</FluentButton>
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@Update">Update</FluentButton>
    }
    <FluentButton Appearance="Appearance.Neutral" OnClick="@Cancel">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public ProjectBoardModel Content { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

    }

    private void Cancel() => Dialog.CancelAsync();

    private async void Update()
    {
        await dataAccess.Update(Content);
        await Dialog.CloseAsync();
    }

    private async void Create()
    {
        await dataAccess.Insert(Content);
        await Dialog.CloseAsync();
    }
}

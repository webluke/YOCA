@inject LinkDataAccess linkData
@inject NavigationManager NavigationManager
@inject LinkTargets targets

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
            <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-house-laptop"))" IconColor="Color.Accent" Href="/" Match="NavLinkMatch.All">Home</FluentNavLink>
            <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-clipboard"))" IconColor="Color.Accent" Href="clipboard" Match="NavLinkMatch.Prefix">Clipboard</FluentNavLink>
            <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-lightbulb"))" IconColor="Color.Accent" Href="ideas" Match="NavLinkMatch.Prefix">Ideas</FluentNavLink>
            <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-list-check"))" IconColor="Color.Accent" Href="projects" Match="NavLinkMatch.Prefix">Projects</FluentNavLink>
            <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-clock-rotate-left"))" IconColor="Color.Accent" Href="rewind" Match="NavLinkMatch.Prefix">Rewind</FluentNavLink>
            @if (menuLinks != null)
            {
                foreach (var l in menuLinks)
                {
                    <FluentNavLink Icon="@(FontAwesome.Icon($"{l.Icon}"))" IconColor="Color.Accent" Href="@l.URL" Match="NavLinkMatch.All" Target="@targets.DefaultLinkTargets[l.Type].Code">@l.MenuName</FluentNavLink>
                }
            }
        <AuthorizeView Roles="Admin">
                <FluentNavGroup Title="Admin" Icon="@(FontAwesome.Icon("fas fa-toolbox"))" IconColor="Color.Accent" Expanded="true">
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-calendar-day"))" IconColor="Color.Accent" Href="admin/days" Match="NavLinkMatch.Prefix">Days</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-clipboard"))" IconColor="Color.Accent" Href="admin/clipboard" Match="NavLinkMatch.Prefix">Clipboard</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-lightbulb"))" IconColor="Color.Accent" Href="admin/ideas" Match="NavLinkMatch.Prefix">Ideas</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-list-check"))" IconColor="Color.Accent" Href="admin/projects" Match="NavLinkMatch.Prefix">Projects</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-clock-rotate-left"))" IconColor="Color.Accent" Href="admin/rewind" Match="NavLinkMatch.Prefix">Rewind</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-newspaper"))" IconColor="Color.Accent" Href="admin/pages" Match="NavLinkMatch.Prefix">Pages</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-link"))" IconColor="Color.Accent" Href="admin/links" Match="NavLinkMatch.Prefix">Links</FluentNavLink>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-sliders"))" IconColor="Color.Accent" Href="admin/site" Match="NavLinkMatch.Prefix">Site</FluentNavLink>
            </FluentNavGroup>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized>
                    @* <FluentNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</FluentNavLink> *@
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-person-through-window"))" IconColor="Color.Accent" Href="Account/Logout" Match="NavLinkMatch.Prefix">Logout</FluentNavLink>
            </Authorized>
            <NotAuthorized>
                    <FluentNavLink Icon="@(FontAwesome.Icon("fas fa-user-lock"))" IconColor="Color.Accent" Href="Account/Login" Match="NavLinkMatch.Prefix">Login</FluentNavLink>
            </NotAuthorized>
        </AuthorizeView>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private string? currentUrl;
    private IEnumerable<MenuLinksModel> menuLinks;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await RefreshData();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task RefreshData()
    {
        menuLinks = await linkData.GetAllMenu();
    }
}

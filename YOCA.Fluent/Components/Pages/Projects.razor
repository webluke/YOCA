@page "/projects"
@inject ProjectDataAccess projectAccess
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Projects</PageTitle>
<h3>Projects</h3>
<br />
@if (projectItems != null)
{
    @foreach (var p in projectItems)
    {
        <FluentCard Height="auto">
            <h4>@p.Title</h4>
            <FluentToolbar style="width:100%">
                <h5>Start: @p.StartDate - End: @p.EndDate</h5>
                <StatusBadge statusIndex="@p.Status" />
            </FluentToolbar>
            <br />
            <hr />
            @((MarkupString)MarkdownService.Parse(p.Description))
            <br />
            @if (p.Boards.Count > 1)
            {
                <br />
                <FluentStack Orientation="Orientation.Horizontal">
                    @foreach (var board in p.Boards)
                    {
                        <FluentCard Height="auto">
                            <FluentToolbar style="width:100%">
                                <div role="status" style="height: 100%; vertical-align: middle; padding: 10px 10px 0px 10px; boarder: 2px solid gray; border-radius: 5px; color: @board.Color. ; background-color: @board.BackgroundColor ;">
                                    <h5><i class="@board.Icon" />&nbsp;&nbsp;@board.Title</h5>
                                </div>
                            </FluentToolbar>
                            <hr />
                            <FluentStack Orientation="Orientation.Vertical">
                                @foreach (var task in board.Tasks)
                                {
                                    <FluentCard style="margin-bottom: 0px;">
                                        <FluentToolbar style="width:100%">
                                            <h5>@task.Title</h5>
                                        </FluentToolbar>
                                        <hr />
                                        @((MarkupString)MarkdownService.Parse(task.Description))
                                    </FluentCard>
                                }
                            </FluentStack>
                        </FluentCard>
                    }
                </FluentStack>
            }
        </FluentCard>
        <br />
    }
}

@code {
    private IEnumerable<ProjectModel>? projectItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("highlightCode");
    }

    private async Task RefreshData()
    {
        projectItems = await projectAccess.GetAllWithTasks();
    }
}

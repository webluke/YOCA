@page "/admin/pages"
@attribute [Authorize(Roles = "Admin")]
@inject PageDataAccess pageData
@rendermode InteractiveServer

<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Admin - Pages</PageTitle>
<MudText Typo="Typo.h4">Pages</MudText>
<br />
<MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="e => Create(e)">Create</MudButton>
<br />
<MudTable Items="@pages" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Order</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Icon</MudTh>
        <MudTh>View Count</MudTh>
        <MudTh>Published</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Order">@context.Order</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Icon"><MudIcon Icon="@($"fas {context.Icon}")" /></MudTd>
        <MudTd DataLabel="View Count">@context.ViewCount</MudTd>
        <MudTd DataLabel="Published">@context.IsPublished</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="e => Update(e, context.Id)">Edit</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="e => Delete(e, context.Id)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<PageModel>? pages {get; set;}

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        pages = await pageData.GetAllAdmin();
    }


    private async void Delete(MouseEventArgs e, string id)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        //state = result == null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            await pageData.Delete(id);
            await RefreshData();
        }
        StateHasChanged();
    }

    private async Task Create(MouseEventArgs e)
    {
        PageModel model = new();
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<PageDialog> { { x => x.model, model } };

        var dialog = DialogService.Show<PageDialog>("Create Page", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }

    private async Task Update(MouseEventArgs e, string cbId)
    {
        PageModel model = await pageData.GetId(cbId);
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<PageDialog> { { x => x.model, model } };

        var dialog = await DialogService.ShowAsync<PageDialog>("Update Page", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }
}

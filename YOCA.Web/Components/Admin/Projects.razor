@page "/admin/projects"
@attribute [Authorize(Roles = "Admin")]
@inject ProjectDataAccess projectData
@inject ProjectTaskDataAccess taskData
@inject Statuses state
@rendermode InteractiveServer

<MudDialogProvider />
<br />
<h3>Projects</h3>
<br />
<MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="e => Create(e)">Create</MudButton>
<br />
@if (projects != null) {
@foreach(var project in projects)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">@project.Title</MudText>
                <MudText Typo="Typo.subtitle1"><b>Start Date: </b> @project.StartDate.ToString("MMMM d, yyyy") - <b>End Date: </b>@project.EndDate.ToString("MMMM d, yyyy")</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Success" OnClick="e => CreateTask(e, project.Id)">Create Task</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="e => Update(e, project.Id)">Edit</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="e => Delete(e, project.Id)">Delete</MudButton>
        </MudCardActions>
        <MudCardContent>
            <MudText><b>Description: </b></MudText>
            <MudText>@project.Description</MudText>
            <MudTable Items="@project.Tasks" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Order</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Order">@context.Order</MudTd>
                    <MudTd DataLabel="Title"><MudChip T="string" Color="@state.DefaultStatuses[context.Status].Color" Label="true">@state.DefaultStatuses[context.Status].Description</MudChip></MudTd>
                    <MudTd DataLabel="Menu Name">@context.Title</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="e => UpdateTask(e, context.Id)">Edit</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="e => DeleteTask(e, context.Id)">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
    <br />
}
}

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<ProjectModel>? projects { get; set; }
    private bool isUpdate = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        projects = await projectData.GetAllWithTasks();
    }

    private async void Delete(MouseEventArgs e, string id)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        //state = result == null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            await projectData.Delete(id);
            await RefreshData();
        }
        StateHasChanged();
    }

    private async Task Create(MouseEventArgs e)
    {
        ProjectModel model = new();
        model.StartDate = DateOnly.FromDateTime(DateTime.Now);
        model.EndDate = DateOnly.FromDateTime(DateTime.Now.AddDays(14));
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ProjectDialog> { { x => x.model, model } };

        var dialog = DialogService.Show<ProjectDialog>("Create Project", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }

    private async Task Update(MouseEventArgs e, string id)
    {
        ProjectModel model = await projectData.GetId(id);
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ProjectDialog> { { x => x.model, model } };

        var dialog = await DialogService.ShowAsync<ProjectDialog>("Update Project", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }

    private async void DeleteTask(MouseEventArgs e, string id)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        //state = result == null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            await taskData.Delete(id);
            await RefreshData();
        }
        StateHasChanged();
    }

    private async Task CreateTask(MouseEventArgs e, string projectId)
    {
        ProjectTaskModel model = new();
        model.ProjectId = projectId;
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ProjectTaskDialog> { { x => x.model, model } };

        var dialog = DialogService.Show<ProjectTaskDialog>("Create Link", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }

    private async Task UpdateTask(MouseEventArgs e, string id)
    {
        ProjectTaskModel model = await taskData.GetId(id);
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ProjectTaskDialog> { { x => x.model, model } };

        var dialog = await DialogService.ShowAsync<ProjectTaskDialog>("Update Link", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }
}

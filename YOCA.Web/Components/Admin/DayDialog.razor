@inject ISnackbar Snackbar
@inject DayOfCodeDataAccess dayData
@rendermode InteractiveServer

<MudPopoverProvider />

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="fas fa-calendar-day" Class="mr-3 mb-n1" />
            Day of Code
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@model">
            <MudGrid>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudDatePicker @bind-Date="@tempDate" Label="Date" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopLeft" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudNumericField @bind-Value="@model.Day" Label="Day" HelperText="0 Start Day" />
                                </MudItem>
                            </MudGrid>
                            <MudTextField @bind-Value="@model.Goal" Label="Goal" />
                            <MudTextField @bind-Value="@model.Result" Label="Result" />
                            <MudTextField @bind-Value="@model.Tomorrow" Label="Tomorrow" />
                            <br />
                            <MarkdownEditor @bind-Value="@model.Summary" Theme="3024-night" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (String.IsNullOrEmpty(model.Id))
        {
            <MudButton Color="Color.Success" OnClick="Create">Create</MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" OnClick="Update">Update</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DayOfCodeModel model { get; set; }
    private DateTime? tempDate = DateTime.Today;

    protected override void OnInitialized()
    {
        tempDate = model.Date.ToDateTime(TimeOnly.MinValue);
    }

    private void Cancel() => MudDialog.Cancel();

    private async void Update()
    {
        model.Date = DateOnly.FromDateTime(tempDate.Value);
        await dayData.Update(model);
        Snackbar.Add("Day of Code Updated", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async void Create()
    {
        model.Date = DateOnly.FromDateTime(tempDate.Value);
        await dayData.Insert(model);
        Snackbar.Add("Day of Code Created", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }
}

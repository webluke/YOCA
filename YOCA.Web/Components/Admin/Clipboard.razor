@page "/admin/clipboard"
@attribute [Authorize(Roles = "Admin")]
@inject ClipboardDataAccess cbData
@inject Statuses state
@rendermode InteractiveServer

<MudDialogProvider />
<EditForm Model="@newCB">
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="newCB.Title" Label="Title" />
                    <MudGrid>
                        <MudItem xs="6">
                            <MudNumericField @bind-Value="newCB.Order" Label="Order" />
                        </MudItem>
                        <MudItem xs="6">
                            <div class="mud-input-control mud-input-text-with-label mud-select">
                                <div class="mud-input-control-input-container">
                                    <div class="mud-input mud-input-text mud-input-text-with-label mud-input-adorned-end mud-input-underline mud-typography-input mud-select-input">
                                        <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol" for="Status">Status</label>
                                        <InputSelect @bind-Value="newCB.Status" Label="Status" class="mud-input-slot mud-input-root mud-input-root-text mud-input-root-adorned-end mud-select-input">
                                            @foreach (var status in state.DefaultStatuses)
                                            {
                                                <option value="@status.Key">@status.Value.Name</option>
                                                
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                        </MudItem>
                    </MudGrid>
                    <br />
                    <MarkdownEditor @bind-Value="newCB.Note" Theme="3024-night" />
                    @if (String.IsNullOrEmpty(newCB.Id))
                    {
                        <MudButton Color="Color.Success" Variant="Variant.Outlined" OnClick="CreateClip">Create Clip</MudButton>
                    }
                    else
                    {
                        <MudButton Color="Color.Info" Variant="Variant.Outlined" OnClick="UpdateClip">Update Clip</MudButton>
                        <MudButton Color="Color.Warning" Variant="Variant.Outlined" OnClick="CancelUpdate">Cancel</MudButton>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
<br />
<h3>Clipboard</h3>
<br />
<MudTable Items="@cb" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Order</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Note</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Order">@context.Order</MudTd>
        <MudTd DataLabel="Status"><MudChip T="string" Color="@state.DefaultStatuses[context.Status].Color" Label="true">@state.DefaultStatuses[context.Status].Description</MudChip></MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="e => EditClip(e, context.Id)">Edit</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="e => DeleteClipboard(e, context.Id)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<ClipboardModel>? cb { get; set; }
    private ClipboardModel newCB = new ClipboardModel();
    private bool isUpdate = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        cb = await cbData.GetAllAdmin();
    }

    private async Task CreateClip()
    {
        await cbData.Insert(newCB);
        newCB = new ClipboardModel();
        await RefreshData();
    }

    private async Task UpdateClip()
    {
        await cbData.Update(newCB);
        newCB = new ClipboardModel();
        isUpdate = false;
        await RefreshData();
    }

    private async Task CancelUpdate()
    {
        newCB = new ClipboardModel();
        isUpdate = false;
        await RefreshData();
    }

    private async Task EditClip(MouseEventArgs e, string id)
    {
        newCB = cb.FirstOrDefault(d => d.Id == id);
        isUpdate = true;
    }

    private async void DeleteClipboard(MouseEventArgs e, string id)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        //state = result == null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            await cbData.Delete(id);
            await RefreshData();
        }
        StateHasChanged();
    }

    // private async Task CreateClipboard(MouseEventArgs e)
    // {
    //     ClipboardModel cbm = new();
    //     DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    //     var parameters = new DialogParameters<ClipboardDialog> { { x => x.cb, cbm } };

    //     var dialog = DialogService.Show<ClipboardDialog>("Create Clipboard", parameters, options);
    //     var result = await dialog.Result;

    //     if (!result.Canceled)
    //     {
    //         await RefreshData();
    //     }
    // }

    // private async Task UpdateClipboard(MouseEventArgs e, string cbId)
    // {
    //     ClipboardModel cbm = await cbData.GetId(cbId);
    //     DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    //     var parameters = new DialogParameters<ClipboardDialog> { { x => x.cb, cbm } };

    //     var dialog = await DialogService.ShowAsync<ClipboardDialog>("Update Clipboard", parameters, options);
    //     var result = await dialog.Result;

    //     if (!result.Canceled)
    //     {
    //         await RefreshData();
    //     }
    // }


}

@page "/admin/clipboard"
@attribute [Authorize(Roles = "Admin")]
@inject ClipboardDataAccess cbData
@inject Statuses state
@rendermode InteractiveServer
<MudPopoverProvider />

<h3>Clipboard</h3>
<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="e => CreateClipboard(e)">Create Clipboard Item</MudButton>

<MudTable Items="@cb" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Order</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Note</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Order">@context.Order</MudTd>
        <MudTd DataLabel="Status"><MudChip T="string" Color="@state.DefaultStatuses[context.Status].Color" Label="true">@state.DefaultStatuses[context.Status].Description</MudChip></MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="e => UpdateClipboard(e, context.Id)">Edit</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="e => DeleteClipboard(e, context.Id)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private IEnumerable<ClipboardModel>? cb { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        cb = await cbData.GetAllAdmin();
    }

    private async Task CreateClipboard(MouseEventArgs e)
    {
        ClipboardModel cbm = new();
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ClipboardDialog> { { x => x.cb, cbm } };

        var dialog = DialogService.Show<ClipboardDialog>("Create Clipboard", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }

    private async Task UpdateClipboard(MouseEventArgs e, string cbId)
    {
        ClipboardModel cbm = await cbData.GetId(cbId);
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ClipboardDialog> { { x => x.cb, cbm } };

        var dialog = await DialogService.ShowAsync<ClipboardDialog>("Update Clipboard", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshData();
        }
    }

    private async void DeleteClipboard(MouseEventArgs e, string id)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Deleting can not be undone!",
        yesText: "Delete!", cancelText: "Cancel");
        //state = result == null ? "Canceled" : "Deleted!";
        if (result == true)
        {
            await cbData.Delete(id);
            await RefreshData();
        }
        StateHasChanged();
    }

}

@inject Statuses state

@if (p != null)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@p.Title
                    <MudChip T="string" Color="@state.DefaultStatuses[p.Status].Color" Label="true">@state.DefaultStatuses[p.Status].Description</MudChip>
                </MudText>
                <MudText Typo="Typo.h6">Start: @p.StartDate - End: @p.EndDate</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @((MarkupString)Markdown.ParseHtmlString(p.Description).ToString())
            @if (p.Tasks.Count > 0)
            {
            <MudTimeline>
                @foreach (var task in p.Tasks)
                {
                <MudTimelineItem Color="@state.DefaultStatuses[task.Status].Color" TimelineAlign="TimelineAlign.End">
                    <ItemDot>
                                <MudIcon Icon="@state.DefaultStatuses[task.Status].Icon" Size="Size.Medium" />
                    </ItemDot>
                    <ItemOpposite>
                        <MudText>@task.Title</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText>@task.Description</MudText>
                    </ItemContent>
                </MudTimelineItem>
                }
            </MudTimeline>
            }
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    public ProjectModel p { get; set; }

    protected override void OnInitialized()
    {

    }

}

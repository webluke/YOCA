@implements IDisposable

@inject LinkDataAccess linkData
@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="fas fa-house-laptop">Home</MudNavLink>
    <MudNavLink Href="clipboard" Match="NavLinkMatch.Prefix" Icon="fas fa-clipboard">Clipboard</MudNavLink>
    <MudNavLink Href="projects" Match="NavLinkMatch.Prefix" Icon="fas fa-list-check">Projects</MudNavLink>
    @if (menuLinks != null)
    {
        foreach (var l in menuLinks)
        {
            <MudNavLink Href="@l.URL" Match="NavLinkMatch.All" Icon="@($"fas {l.Icon}")">@l.MenuName</MudNavLink>
        }
    }
    <AuthorizeView Roles="Admin">
        <MudNavGroup Title="Admin" Icon="fas fa-toolbox" Expanded="true">
        <MudNavLink Href="admin/days" Match="NavLinkMatch.Prefix" Icon="fas fa-calendar-day">Days</MudNavLink>
        <MudNavLink Href="admin/clipboard" Match="NavLinkMatch.Prefix" Icon="fas fa-clipboard">Clipboard</MudNavLink>
        <MudNavLink Href="admin/projects" Match="NavLinkMatch.Prefix" Icon="fas fa-list-check">Projects</MudNavLink>
        <MudNavLink Href="admin/pages" Match="NavLinkMatch.Prefix" Icon="fas fa-newspaper">Pages</MudNavLink>
        <MudNavLink Href="admin/links" Match="NavLinkMatch.Prefix" Icon="fas fa-link">Links</MudNavLink>
        <MudNavLink Href="admin/site" Match="NavLinkMatch.Prefix" Icon="fas fa-sliders">Site</MudNavLink>
        </MudNavGroup>
    </AuthorizeView>
    <AuthorizeView>
        <Authorized>
            @* <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink> *@
            <MudNavLink Href="Account/Logout" Match="NavLinkMatch.Prefix" Icon="fas fa-person-through-window">Logout</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="fas fa-user-lock">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
    <br />
</MudNavMenu>


@code {
    private string? currentUrl;
    private IEnumerable<MenuLinksModel> menuLinks;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await RefreshData();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task RefreshData()
    {
        menuLinks = await linkData.GetAllMenu();
    }
}


